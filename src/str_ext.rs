use rdev::{Button, Key};

pub trait StrExt {
    fn ser_to_str(&self) -> &str;
    fn de_from_str(value: &str) -> Option<Self>
    where
        Self: Sized;
}

impl StrExt for Button {
    fn ser_to_str(&self) -> &str {
        match self {
            Button::Left => "mbl",
            Button::Right => "mbr",
            Button::Middle => "mbm",
            Button::Unknown(_) => "unknown",
        }
    }

    fn de_from_str(value: &str) -> Option<Self> {
        match value {
            "mbl" => Some(Button::Left),
            "mbr" => Some(Button::Right),
            "mbm" => Some(Button::Middle),
            _ => None,
        }
    }
}

impl StrExt for Key {
    fn ser_to_str(&self) -> &str {
        match self {
            Key::Alt => "alt",
            Key::AltGr => "altgr",
            Key::Backspace => "bps",
            Key::CapsLock => "caplk",
            Key::ControlLeft => "lctrl",
            Key::ControlRight => "rctrl",
            Key::Delete => "del",
            Key::DownArrow => "down",
            Key::End => "end",
            Key::Escape => "esc",
            Key::F1 => "f1",
            Key::F10 => "f10",
            Key::F11 => "f11",
            Key::F12 => "f12",
            Key::F2 => "f2",
            Key::F3 => "f3",
            Key::F4 => "f4",
            Key::F5 => "f5",
            Key::F6 => "f6",
            Key::F7 => "f7",
            Key::F8 => "f8",
            Key::F9 => "f9",
            Key::Home => "home",
            Key::LeftArrow => "left",
            Key::MetaLeft => "mleft",
            Key::MetaRight => "mright",
            Key::PageDown => "pgdn",
            Key::PageUp => "pgup",
            Key::Return => "ent",
            Key::RightArrow => "right",
            Key::ShiftLeft => "lshft",
            Key::ShiftRight => "rshft",
            Key::Space => "spc",
            Key::Tab => "tab",
            Key::UpArrow => "up",
            Key::PrintScreen => "prscn",
            Key::ScrollLock => "scrlk",
            Key::Pause => "pause",
            Key::NumLock => "numlock",
            Key::BackQuote => "bqut",
            Key::Num1 => "num1",
            Key::Num2 => "num2",
            Key::Num3 => "num3",
            Key::Num4 => "num4",
            Key::Num5 => "num5",
            Key::Num6 => "num6",
            Key::Num7 => "num7",
            Key::Num8 => "num8",
            Key::Num9 => "num9",
            Key::Num0 => "num0",
            Key::Minus => "min",
            Key::Equal => "eql",
            Key::KeyQ => "q",
            Key::KeyW => "w",
            Key::KeyE => "e",
            Key::KeyR => "r",
            Key::KeyT => "t",
            Key::KeyY => "y",
            Key::KeyU => "u",
            Key::KeyI => "i",
            Key::KeyO => "o",
            Key::KeyP => "p",
            Key::LeftBracket => "lbrk",
            Key::RightBracket => "rbrk",
            Key::KeyA => "a",
            Key::KeyS => "s",
            Key::KeyD => "d",
            Key::KeyF => "f",
            Key::KeyG => "g",
            Key::KeyH => "h",
            Key::KeyJ => "j",
            Key::KeyK => "k",
            Key::KeyL => "l",
            Key::SemiColon => "scoln",
            Key::Quote => "qut",
            Key::BackSlash => "bslsh",
            Key::IntlBackslash => "intbslsh",
            Key::KeyZ => "z",
            Key::KeyX => "x",
            Key::KeyC => "c",
            Key::KeyV => "v",
            Key::KeyB => "b",
            Key::KeyN => "n",
            Key::KeyM => "m",
            Key::Comma => "comma",
            Key::Dot => "dot",
            Key::Slash => "slsh",
            Key::Insert => "insert",
            Key::KpReturn => "kpent",
            Key::KpMinus => "kpmin",
            Key::KpPlus => "kpplus",
            Key::KpMultiply => "kpmul",
            Key::KpDivide => "kpdiv",
            Key::Kp0 => "kp0",
            Key::Kp1 => "kp1",
            Key::Kp2 => "kp2",
            Key::Kp3 => "kp3",
            Key::Kp4 => "kp4",
            Key::Kp5 => "kp5",
            Key::Kp6 => "kp6",
            Key::Kp7 => "kp7",
            Key::Kp8 => "kp8",
            Key::Kp9 => "kp9",
            Key::KpDelete => "kpdel",
            Key::Function => "function",
            Key::Unknown(_) => "unknown",
        }
    }

    fn de_from_str(value: &str) -> Option<Self>
    where
        Self: Sized,
    {
        match value {
            "alt" => Some(Key::Alt),
            "altgr" => Some(Key::AltGr),
            "bps" => Some(Key::Backspace),
            "caplk" => Some(Key::CapsLock),
            "lctrl" => Some(Key::ControlLeft),
            "rctrl" => Some(Key::ControlRight),
            "del" => Some(Key::Delete),
            "down" => Some(Key::DownArrow),
            "end" => Some(Key::End),
            "esc" => Some(Key::Escape),
            "f1" => Some(Key::F1),
            "f10" => Some(Key::F10),
            "f11" => Some(Key::F11),
            "f12" => Some(Key::F12),
            "f2" => Some(Key::F2),
            "f3" => Some(Key::F3),
            "f4" => Some(Key::F4),
            "f5" => Some(Key::F5),
            "f6" => Some(Key::F6),
            "f7" => Some(Key::F7),
            "f8" => Some(Key::F8),
            "f9" => Some(Key::F9),
            "home" => Some(Key::Home),
            "left" => Some(Key::LeftArrow),
            "mleft" => Some(Key::MetaLeft),
            "mright" => Some(Key::MetaRight),
            "pgdn" => Some(Key::PageDown),
            "pgup" => Some(Key::PageUp),
            "ent" => Some(Key::Return),
            "right" => Some(Key::RightArrow),
            "lshft" => Some(Key::ShiftLeft),
            "rshft" => Some(Key::ShiftRight),
            "spc" => Some(Key::Space),
            "tab" => Some(Key::Tab),
            "up" => Some(Key::UpArrow),
            "prscn" => Some(Key::PrintScreen),
            "scrlk" => Some(Key::ScrollLock),
            "pause" => Some(Key::Pause),
            "numlock" => Some(Key::NumLock),
            "bqut" => Some(Key::BackQuote),
            "num1" => Some(Key::Num1),
            "num2" => Some(Key::Num2),
            "num3" => Some(Key::Num3),
            "num4" => Some(Key::Num4),
            "num5" => Some(Key::Num5),
            "num6" => Some(Key::Num6),
            "num7" => Some(Key::Num7),
            "num8" => Some(Key::Num8),
            "num9" => Some(Key::Num9),
            "num0" => Some(Key::Num0),
            "min" => Some(Key::Minus),
            "eql" => Some(Key::Equal),
            "q" => Some(Key::KeyQ),
            "w" => Some(Key::KeyW),
            "e" => Some(Key::KeyE),
            "r" => Some(Key::KeyR),
            "t" => Some(Key::KeyT),
            "y" => Some(Key::KeyY),
            "u" => Some(Key::KeyU),
            "i" => Some(Key::KeyI),
            "o" => Some(Key::KeyO),
            "p" => Some(Key::KeyP),
            "lbrk" => Some(Key::LeftBracket),
            "rbrk" => Some(Key::RightBracket),
            "a" => Some(Key::KeyA),
            "s" => Some(Key::KeyS),
            "d" => Some(Key::KeyD),
            "f" => Some(Key::KeyF),
            "g" => Some(Key::KeyG),
            "h" => Some(Key::KeyH),
            "j" => Some(Key::KeyJ),
            "k" => Some(Key::KeyK),
            "l" => Some(Key::KeyL),
            "scoln" => Some(Key::SemiColon),
            "qut" => Some(Key::Quote),
            "bslsh" => Some(Key::BackSlash),
            "intbslsh" => Some(Key::IntlBackslash),
            "z" => Some(Key::KeyZ),
            "x" => Some(Key::KeyX),
            "c" => Some(Key::KeyC),
            "v" => Some(Key::KeyV),
            "b" => Some(Key::KeyB),
            "n" => Some(Key::KeyN),
            "m" => Some(Key::KeyM),
            "comma" => Some(Key::Comma),
            "dot" => Some(Key::Dot),
            "slsh" => Some(Key::Slash),
            "insert" => Some(Key::Insert),
            "kpent" => Some(Key::KpReturn),
            "kpmin" => Some(Key::KpMinus),
            "kpplus" => Some(Key::KpPlus),
            "kpmul" => Some(Key::KpMultiply),
            "kpdiv" => Some(Key::KpDivide),
            "kp0" => Some(Key::Kp0),
            "kp1" => Some(Key::Kp1),
            "kp2" => Some(Key::Kp2),
            "kp3" => Some(Key::Kp3),
            "kp4" => Some(Key::Kp4),
            "kp5" => Some(Key::Kp5),
            "kp6" => Some(Key::Kp6),
            "kp7" => Some(Key::Kp7),
            "kp8" => Some(Key::Kp8),
            "kp9" => Some(Key::Kp9),
            "kpdel" => Some(Key::KpDelete),
            "function" => Some(Key::Function),
            _ => None,
        }
    }
}
