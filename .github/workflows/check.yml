name: Check

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

jobs:
  fmt:
    runs-on: ubuntu-latest
    name: stable / fmt
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4

      - name: Setup | Install os deps
        run: |
          sudo apt-get -y update
          sudo apt-get install -y libx11-dev

      - name: Setup | Install stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Build | Rustfmt
        run: cargo fmt --check

  clippy:
    runs-on: ubuntu-latest
    name: ${{ matrix.toolchain }} / clippy
    permissions:
      contents: read
      checks: write
    strategy:
      fail-fast: false
      matrix:
        toolchain: [stable, beta]
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4

      - name: Setup | Install os deps
        run: |
          sudo apt-get -y update
          sudo apt-get install -y libx11-dev libxi-dev libxtst-dev

      - name: Setup | Install ${{ matrix.toolchain }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          components: clippy

      - name: Build | Clippy
        uses: LoliGothick/clippy-check@v0.3.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          deny: warnings

  build:
    name: Build binaries
    needs: [clippy, fmt]
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: mkrp-x86_64-linux-gnu.tar.gz
          # - target: aarch64-unknown-linux-gnu
          #   os: ubuntu-latest
          #   name: mkrp-aarch64-linux-gnu.tar.gz
          - target: x86_64-apple-darwin
            os: macos-latest
            name: mkrp-x86_64-apple-darwin.tar.gz
          - target: aarch64-apple-darwin
            os: macos-latest
            name: mkrp-aarch64-apple-darwin.tar.gz
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: mkrp-x86_64-windows.tar.gz
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4

      - name: Setup | Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          targets: ${{matrix.target}}

      # - name: Setup | Install cross [Linux]
      #   if: matrix.os == 'ubuntu-latest'
      #   uses: taiki-e/install-action@v2
      #   with:
      #     tool: cross
      #
      - name: Setup | Install os deps
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get -y update
          sudo apt-get install -y libx11-dev libxi-dev libxtst-dev

      - name: Build | Build [Cargo]
        # if: matrix.os != 'ubuntu-latest'
        run: cargo build --release --locked --target ${{ matrix.target }}

      # - name: Build | Build [Cross]
      #   if: matrix.os == 'ubuntu-latest'
      #   run: cross build --release --locked --target ${{ matrix.target }}
      #
      - name: Post | Prepare artifacts
        if: matrix.os != 'windows-latest'
        run: |
          RESULT="target-${{ matrix.target }}"
          mkdir $RESULT
          cp target/${{ matrix.target }}/release/mkrp $RESULT
          tar czvf ${{ matrix.name }} $RESULT

      - name: Post | Prepare artifacts
        if: matrix.os == 'windows-latest'
        run: |
          set RESULT= target-${{ matrix.target }}
          mkdir %RESULT%
          cp target/${{ matrix.target }}/release/mkrp.exe %RESULT%
          tar czvf ${{ matrix.name }} %RESULT%

      - name: Post | Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}
